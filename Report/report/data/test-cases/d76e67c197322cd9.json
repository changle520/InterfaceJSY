{"uid":"d76e67c197322cd9","name":"获取梯联本地日志","fullName":"device.test_JTC340#test_service_getlog_001","historyId":"ac0c3389a273a108709a245190f5f1f6","time":{"start":1692326085186,"stop":1692326089220,"duration":4034},"status":"broken","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"@allure.feature(\"JTC340梯联测试\")\n    @allure.story(\"获取日志\")\n    @allure.title(\"获取梯联本地日志\")\n    @allure.description(\"\")\n    def test_service_getlog_001():\n        msg = data['msg']['service_getlog']\n        run(\"service_getlog\",msg,productKey,deviceName)\n        # 从文件中获取订阅到的消息并转换为字典对象\n        msg_str = read_submsg()\n>       msg_data = get_msg_sub(msg_str)\n\ndevice\\test_JTC340.py:942: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\mqtt\\get_msg.py:16: in get_msg_sub\n    return json.loads(msg)\nD:\\tool\\python\\lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\nD:\\tool\\python\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x000001F7FFC763E0>, s = '', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nD:\\tool\\python\\lib\\json\\decoder.py:355: JSONDecodeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"status":"broken","statusMessage":"json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)","statusTrace":"@allure.feature(\"JTC340梯联测试\")\n    @allure.story(\"获取日志\")\n    @allure.title(\"获取梯联本地日志\")\n    @allure.description(\"\")\n    def test_service_getlog_001():\n        msg = data['msg']['service_getlog']\n        run(\"service_getlog\",msg,productKey,deviceName)\n        # 从文件中获取订阅到的消息并转换为字典对象\n        msg_str = read_submsg()\n>       msg_data = get_msg_sub(msg_str)\n\ndevice\\test_JTC340.py:942: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\mqtt\\get_msg.py:16: in get_msg_sub\n    return json.loads(msg)\nD:\\tool\\python\\lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\nD:\\tool\\python\\lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x000001F7FFC763E0>, s = '', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\nD:\\tool\\python\\lib\\json\\decoder.py:355: JSONDecodeError","steps":[],"attachments":[{"uid":"8c719600985c7e01","name":"log","source":"8c719600985c7e01.txt","type":"text/plain","size":1119}],"parameters":[],"attachmentsCount":1,"shouldDisplayMessage":true,"stepsCount":0,"hasContent":true},"afterStages":[],"labels":[{"name":"feature","value":"JTC340梯联测试"},{"name":"story","value":"获取日志"},{"name":"parentSuite","value":"device"},{"name":"suite","value":"test_JTC340"},{"name":"host","value":"cale"},{"name":"thread","value":"8932-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"device.test_JTC340"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"d76e67c197322cd9.json","parameterValues":[]}