{"name": "轿厢意外移动-上报", "status": "broken", "statusDetails": {"message": "TimeoutError: timed out", "trace": "@allure.feature(\"JTC340梯联测试\")\n    @allure.story(\"电梯事件上报-故障告警\")\n    @allure.title(\"轿厢意外移动-上报\")\n    @allure.description(\"\")\n    def test_ErrorEvent_post_001():\n    \n        msg = data['msg']['ErrorEvent_post'][0]\n        #获取当前时间的字符串格式并赋值给msg\n        ErrorTime=get_datetime()\n        msg['Params']['Value']['ErrorTime']=ErrorTime\n>       run(\"ErrorEvent_post\",msg,productKey,deviceName)\n\ndevice\\test_JTC340.py:140: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\mqtt\\execute.py:102: in run\n    client=connect_mqtt()\n..\\mqtt\\execute.py:44: in connect_mqtt\n    client.connect(broker,port,keepalive)\nD:\\tool\\python\\lib\\site-packages\\paho\\mqtt\\client.py:914: in connect\n    return self.reconnect()\nD:\\tool\\python\\lib\\site-packages\\paho\\mqtt\\client.py:1044: in reconnect\n    sock = self._create_socket_connection()\nD:\\tool\\python\\lib\\site-packages\\paho\\mqtt\\client.py:3685: in _create_socket_connection\n    return socket.create_connection(addr, timeout=self._connect_timeout, source_address=source)\nD:\\tool\\python\\lib\\socket.py:845: in create_connection\n    raise err\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\naddress = ('test.hzjishiyu.com', 1883), timeout = 5.0, source_address = ('', 0)\n\n    def create_connection(address, timeout=_GLOBAL_DEFAULT_TIMEOUT,\n                          source_address=None):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        A host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        err = None\n        for res in getaddrinfo(host, port, 0, SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket(af, socktype, proto)\n                if timeout is not _GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               TimeoutError: timed out\n\nD:\\tool\\python\\lib\\socket.py:833: TimeoutError"}, "start": 1692688715320, "stop": 1692688720333, "uuid": "94e74d9e-0bae-47e6-961b-b4b239c3689e", "historyId": "f5b43c97527b61eab4f336266bf64351", "testCaseId": "8cad26b3f1bd5036efb164dcb12f377b", "fullName": "device.test_JTC340#test_ErrorEvent_post_001", "labels": [{"name": "feature", "value": "JTC340梯联测试"}, {"name": "story", "value": "电梯事件上报-故障告警"}, {"name": "parentSuite", "value": "device"}, {"name": "suite", "value": "test_JTC340"}, {"name": "host", "value": "cale"}, {"name": "thread", "value": "12784-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "device.test_JTC340"}]}